from typing import Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update, func, cast
from sqlalchemy.dialects.postgresql import JSONB
import asyncio
from ..redis import get_queue
from ..db import SessionLocal

from ..repositories.orders import OrdersRepo
from ..models import Order
from .fragment import buy_stars, buy_premium, buy_ton

async def _save_result(session: AsyncSession, order_id: int, ok: bool, text: str, result_json: dict | None):
    # message ‚Äî –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; gateway_payload.result ‚Äî —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API
    new_payload = cast({"fulfillment_result": result_json or {}}, JSONB)
    merged = func.coalesce(Order.gateway_payload, cast({}, JSONB)).op("||")(new_payload)

    await session.execute(
        update(Order)
        .where(Order.id == order_id)
        .values(
            message=text,
            gateway_payload=merged,
        )
    )
    await session.commit()

def task_wrapper(order_id):
    asyncio.run(fulfill_order(order_id))
    print(f"Done: {order_id}")

async def fulfill_order(order_id: int) -> Tuple[bool, str]:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Fragment API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, msg) ‚Äî –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ö–æ–≥–æ –∫—Ä–µ–¥–∏—Ç—É–µ–º:
    # 1) –µ—Å–ª–∏ recipient –∑–∞–¥–∞–Ω –≤ –∑–∞–∫–∞–∑–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞,
    # 2) –∏–Ω–∞—á–µ –±–µ—Ä—ë–º username –∏–∑ –∑–∞–∫–∞–∑–∞,
    # 3) –µ—Å–ª–∏ –∏ —Ç–∞–º –ø—É—Å—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É (–æ—à–∏–±–∫–∞).
    # recipient = (order.recipient or order.username or "").strip()
    async with SessionLocal() as session:
        orders = OrdersRepo(session)
        order = await orders.get_by_id(order_id)
        if order.recipient:
            recipient = order.recipient[1::].strip()
        else:
            recipient = order.username.strip()
        if not recipient:
            msg = "–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å (username). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            await _save_result(session, order.id, False, msg, {"error": "missing recipient"})
            return False, msg

        try:
            print(2/0)
            print(4)
            if order.type == "stars":
                qty = int(order.amount or 0)
                if qty <= 0:
                    raise ValueError("empty stars qty")
                data = await buy_stars(query=recipient, quantity=qty)
                msg = f"‚≠ê –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {qty} –∑–≤—ë–∑–¥(—ã) –¥–ª—è {recipient}"
                await _save_result(session, order.id, True, msg, data)
                return True, msg

            elif order.type == "premium":
                months = int(order.amount or 0)
                if months <= 0:
                    raise ValueError("empty months")
                data = await buy_premium(query=recipient, months=months)
                msg = f"üëë Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {months} –º–µ—Å. –¥–ª—è {recipient}"
                await _save_result(session, order.id, True, msg, data)
                return True, msg
            elif order.type == "ton":
                amount = int(order.amount or 0)
                if amount <= 0:
                    raise ValueError("empty ton")
                data = await buy_ton(query=recipient, ton=amount)
                msg = f"–ó–∞—á–∏—Å–ª–µ–Ω–æ {amount} TON –¥–ª—è {recipient}"
                await _save_result(session, order.id, True, msg, data)
                return True, msg

            else:
                msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞: {order.type}"
                await _save_result(session, order.id, False, msg, {"error": "unknown type"})
                return False, msg

        except Exception as e:
            print(5)
            # —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º, –µ—Å–ª–∏ Fragment API –≤–µ—Ä–Ω—É–ª 4xx/5xx –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            err = {"error": str(e)}
            msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Fragment: {e}"
            await _save_result(session, order.id, False, msg, err)
            q = await get_queue()
            q.enqueue(task_wrapper, order_id)
            return False, msg
