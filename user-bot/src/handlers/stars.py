from aiogram import Router, F, types
# from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
from decimal import Decimal
import os, asyncio

from ..repositories.users import UsersRepo
from ..repositories.orders import OrdersRepo
from ..repositories.user_bots import UserBotsRepo
from ..keyboards.common import who_kb, cancel_kb, main_menu_kb, payment_methods_kb, payment_kb, back_nav_kb

from ..services.payments_api import create_order
from ..services.order_poll import poll_until_paid

class BuyStars(StatesGroup):
    choose_target = State()
    enter_me = State()
    enter_recipient = State()
    enter_qty = State()
    choose_payment = State()

BTN_SELF = "buy_stars_self"
BTN_GIFT = "buy_stars_gift"
BTN_CANCEL = "buy_stars_cancel"


BTN_PAY_SBP   = "pay_sbp"
BTN_PAY_TON   = "pay_ton"
BTN_PAY_OTHER = "pay_other"

def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="stars")

    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –ø—É–Ω–∫—Ç –º–µ–Ω—é "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"
    @router.callback_query(F.data == "stars")
    async def entry(cb: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await state.set_state(BuyStars.choose_target)
        await cb.message.edit_text("–ö–æ–º—É –ø–æ–∫—É–ø–∞–µ–º –∑–≤—ë–∑–¥—ã?", reply_markup=who_kb(BTN_SELF, BTN_GIFT, BTN_CANCEL))

    # –û—Ç–º–µ–Ω–∞
    @router.callback_query(F.data == BTN_CANCEL)
    async def cancel(cb: types.CallbackQuery, state: FSMContext):
        await state.clear()
        # await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
        await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

    # –°–µ–±–µ
    @router.callback_query(F.data == BTN_SELF)
    async def choose_self(cb: types.CallbackQuery, state: FSMContext):
        user = (await cb.bot.get_chat_member(cb.message.chat.id, cb.message.chat.id)).user
        if not user.username:
            await state.set_state(BuyStars.enter_me)
            await cb.message.edit_text("–£ –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=back_nav_kb())
            return
        await state.update_data(recipient=None)
        await state.set_state(BuyStars.enter_qty)
        await cb.message.edit_text("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∫—É–ø–∏—Ç—å? (–º–∏–Ω–∏–º—É–º 50)", reply_markup=back_nav_kb())

    @router.message(BuyStars.enter_me)
    async def get_me(m: types.Message, state: FSMContext):
        text = (m.text or "").strip()
        if not text:
            await m.answer("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, @username", reply_markup=cancel_kb(BTN_CANCEL))
            return
        await state.update_data(recipient=text)
        await state.set_state(BuyStars.enter_qty)
        await m.answer("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∫—É–ø–∏—Ç—å? (–º–∏–Ω–∏–º—É–º 50)", reply_markup=cancel_kb(BTN_CANCEL))

    
    # –ü–æ–¥–∞—Ä–æ–∫
    @router.callback_query(F.data == BTN_GIFT)
    async def choose_gift(cb: types.CallbackQuery, state: FSMContext):
        await state.set_state(BuyStars.enter_recipient)
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).", reply_markup=cancel_kb(BTN_CANCEL))

    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–æ–º
    @router.message(BuyStars.enter_recipient)
    async def get_recipient(m: types.Message, state: FSMContext):
        text = (m.text or "").strip()
        if not text:
            await m.answer("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, @username", reply_markup=cancel_kb(BTN_CANCEL))
            return
        await state.update_data(recipient=text)
        await state.set_state(BuyStars.enter_qty)
        await m.answer("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∫—É–ø–∏—Ç—å? (–º–∏–Ω–∏–º—É–º 50)", reply_markup=cancel_kb(BTN_CANCEL))

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
    @router.message(BuyStars.enter_qty)
    async def get_qty(m: types.Message, state: FSMContext):
        try:
            qty = int((m.text or "").strip())
        except Exception:
            await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 100", reply_markup=cancel_kb(BTN_CANCEL))
            return
        if qty < 50:
            await m.answer("–ú–∏–Ω–∏–º—É–º 50. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚â• 50.", reply_markup=cancel_kb(BTN_CANCEL))
            return
        
        await state.update_data(qty=qty)
        await state.set_state(BuyStars.choose_payment)
        await m.answer(
            f"–û–∫–µ–π, {qty} ‚≠ê.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_methods_kb(BTN_PAY_SBP, BTN_PAY_TON, BTN_PAY_OTHER, BTN_CANCEL)
        )

    async def _start_polling(cb: types.CallbackQuery, order_id: int):
        async def _on_paid(data: dict):
            msg = data.get("message") or "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
            await cb.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n{msg}", reply_markup=back_nav_kb())

        async def _on_timeout():
            await cb.message.answer(f"‚è≥ –ó–∞–∫–∞–∑ ‚Ññ{order_id}: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", reply_markup=back_nav_kb())

        asyncio.create_task(poll_until_paid(order_id, on_paid=_on_paid, on_timeout=_on_timeout, interval_sec=15, timeout_sec=30 * 60))

    @router.callback_query(F.data == BTN_PAY_TON)
    async def pay_ton(cb: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        qty = data.get("qty")
        recipient = data.get("recipient")
        if not qty:
            await cb.message.answer("–ù–µ –≤–∏–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã¬ª.")
            await state.clear()
            return

        resp = await create_order(
            user_tg_id=cb.from_user.id,
            username=cb.from_user.username,
            recipient=recipient,
            order_type="stars",
            amount=int(qty),
            payment_method="TON",
            bot_tg_id=cb.bot.id
        )
        order_id = resp["order_id"]
        ton = resp.get("ton", {})
        address = ton.get("address")
        memo = ton.get("memo")
        amount_ton = ton.get("amount_ton")
        # print(amount_ton)
        link = f"ton://transfer/{address}?amount={int(float(amount_ton) * 1000000)}000&text={memo}"

        await state.clear()
        await cb.message.edit_text(
            "üíé –ü–ª–∞—Ç—ë–∂ (TON)\n"
            f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}: {qty} ‚≠ê\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <code>{amount_ton}</code> TON –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{address}</code>\n\n"
            f"‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (TAG/MEMO):\n"
            f"<code>{memo}</code>\n\n"
            f"–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω\n\n"
            f"–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç",
            reply_markup=payment_kb(link)
        )
        await _start_polling(cb, order_id)


    @router.callback_query(F.data == BTN_PAY_SBP)
    async def pay_sbp(cb: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        qty = data.get("qty")
        recipient = data.get("recipient")
        if not qty:
            await cb.message.answer("–ù–µ –≤–∏–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã¬ª")
            await state.clear()
            return

        resp = await create_order(
            user_tg_id=cb.from_user.id,
            username=cb.from_user.username,
            recipient=recipient,
            order_type="stars",
            amount=int(qty),
            payment_method="SBP",
            bot_tg_id=cb.bot.id
        )
        order_id = resp["order_id"]
        sbp = resp.get("sbp", {})
        redirect = sbp.get("redirect_url")
        amount_rub = sbp.get("amount_rub")

        await state.clear()
        await cb.message.edit_text(
            "üè¶ –ü–ª–∞—Ç—ë–∂ –°–ë–ü\n"
            f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}: {qty} ‚≠ê\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n\n"
            "–õ–∏–±–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            f"<code>{redirect}</code>\n\n"
            "–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç",
            reply_markup=payment_kb(redirect)
        )
        await _start_polling(cb, order_id)

    @router.callback_query(F.data == BTN_PAY_OTHER)  # ¬´–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–∞¬ª ‚Üí HELEKET
    async def pay_heleket(cb: types.CallbackQuery, state):
        data = await state.get_data()
        qty = data.get("qty")
        recipient = data.get("recipient")
        if not qty:
            await cb.message.answer("–ù–µ –≤–∏–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã¬ª.")
            await state.clear()
            return

        resp = await create_order(
            user_tg_id=cb.from_user.id,
            username=cb.from_user.username,
            recipient=recipient,
            order_type="stars",
            amount=int(qty),
            payment_method="CRYPTO_OTHER",
            bot_tg_id=cb.bot.id
        )
        order_id = resp["order_id"]
        url = resp["other"]["redirect_url"]
        # msg = resp.get("message") or "–°—á—ë—Ç Heleket —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã."

        await state.clear()
        await cb.message.edit_text(f"ü™ô –ü–ª–∞—Ç—ë–∂ Heleket\n"
                                    f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}: {qty} ‚≠ê\n\n"
                                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n\n"
                                    "–õ–∏–±–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                                    f"<code>{url}</code>\n\n"
                                    "–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç",
                                    reply_markup=payment_kb(url))
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å URL —Å—Ä–∞–∑—É –∑–¥–µ—Å—å ‚Äî —Ä–∞—Å—à–∏—Ä—å –æ—Ç–≤–µ—Ç Payment API (–¥–æ–±–∞–≤—å –ø–æ–ª–µ heleket.url)
        await _start_polling(cb, order_id)
        
    return router
