from aiogram import Router, F, types
# from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
from decimal import Decimal
import os, asyncio

from ..repositories.users import UsersRepo
from ..repositories.orders import OrdersRepo
from ..services.pricing import get_star_price_in_ton, calc_ton_for_stars
from ..services.ton import wait_ton_payment
from ..keyboards.common import who_kb, cancel_kb, main_menu_kb

class BuyStars(StatesGroup):
    choose_target = State()
    enter_recipient = State()
    enter_qty = State()

BTN_SELF = "buy_stars_self"
BTN_GIFT = "buy_stars_gift"
BTN_CANCEL = "buy_stars_cancel"

def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="stars")

    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –ø—É–Ω–∫—Ç –º–µ–Ω—é "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"
    @router.message(F.text == ("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"))
    async def entry(m: types.Message, state: FSMContext):
        await state.clear()
        await state.set_state(BuyStars.choose_target)
        await m.answer("–ö–æ–º—É –ø–æ–∫—É–ø–∞–µ–º –∑–≤—ë–∑–¥—ã?", reply_markup=who_kb(BTN_SELF, BTN_GIFT, BTN_CANCEL))

    # –û—Ç–º–µ–Ω–∞
    @router.callback_query(F.data == BTN_CANCEL)
    async def cancel(cb: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
        await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

    # –°–µ–±–µ
    @router.callback_query(F.data == BTN_SELF)
    async def choose_self(cb: types.CallbackQuery, state: FSMContext):
        await state.update_data(recipient=None)
        await state.set_state(BuyStars.enter_qty)
        await cb.message.edit_text("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∫—É–ø–∏—Ç—å? (–º–∏–Ω–∏–º—É–º 50)")
    
    # –ü–æ–¥–∞—Ä–æ–∫
    @router.callback_query(F.data == BTN_GIFT)
    async def choose_gift(cb: types.CallbackQuery, state: FSMContext):
        await state.set_state(BuyStars.enter_recipient)
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).", reply_markup=cancel_kb(BTN_CANCEL))

    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–æ–º
    @router.message(BuyStars.enter_recipient)
    async def get_recipient(m: types.Message, state: FSMContext):
        text = (m.text or "").strip()
        if not text:
            await m.answer("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, @username", reply_markup=cancel_kb(BTN_CANCEL))
            return
        await state.update_data(recipient=text)
        await state.set_state(BuyStars.enter_qty)
        await m.answer("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∫—É–ø–∏—Ç—å? (–º–∏–Ω–∏–º—É–º 50)", reply_markup=cancel_kb(BTN_CANCEL))

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
    @router.message(BuyStars.enter_qty)
    async def get_qty(m: types.Message, state: FSMContext):
        try:
            qty = int((m.text or "").strip())
        except Exception:
            await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 100", reply_markup=cancel_kb(BTN_CANCEL))
            return
        if qty < 50:
            await m.answer("–ú–∏–Ω–∏–º—É–º 50. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚â• 50.", reply_markup=cancel_kb(BTN_CANCEL))
            return

        data = await state.get_data()
        recipient = data.get("recipient")

        wallet = os.getenv("TON_WALLET")
        if not wallet:
            await m.answer("–ö–æ—à–µ–ª—ë–∫ TON –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return

        async with session_maker() as session:
            users = UsersRepo(session)
            orders = OrdersRepo(session)
            user = await users.upsert_from_telegram(m.from_user)

            # —Ü–µ–Ω–∞ 1 –∑–≤–µ–∑–¥—ã –≤ TON
            price_per_star_ton = await get_star_price_in_ton(session)  # Decimal
            total_ton = calc_ton_for_stars(qty, price_per_star_ton)    # Decimal

            memo_prefix = os.getenv("TON_MEMO_PREFIX", "INV-")
            memo = f"{memo_prefix}{m.from_user.id}-{m.message_id}"

            # —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ pending
            # order = await orders.create_pending_ton_order(
            #     user_id=user.id,
            #     username=user.username,
            #     stars_qty=qty,
            #     recipient=recipient,
            #     amount_ton=float(total_ton),
            #     memo=memo,
            #     wallet=wallet,
            # )
            order = await orders.create_pending_ton_order(
                user_id=user.id,
                username=user.username,
                recipient=recipient,
                type="stars",
                amount=qty,
                price=float(total_ton),
                memo=memo,
                wallet=wallet
            )

        await state.clear()
        await m.answer(
            f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}: {qty} ‚≠ê\n"
            "üîê –ü–ª–∞—Ç—ë–∂ (TON)\n"
            f"‚û§ –ê–¥—Ä–µ—Å: <code>{wallet}</code>\n"
            f"‚û§ –°—É–º–º–∞: <code>{total_ton}</code> TON\n"
            f"‚û§ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (TAG/MEMO): <code>{memo}</code>\n\n"
            "–í–∞–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <b>—Ç–æ—á–Ω–æ</b>, –∏–Ω–∞—á–µ –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            disable_web_page_preview=True
        )

        # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        async def _check():
            tx_hash = await wait_ton_payment(wallet, memo, total_ton)
            if tx_hash:
                async with session_maker() as session:
                    orders = OrdersRepo(session)
                    await orders.mark_paid(order.id, tx_hash, income=None)
                await m.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–ª—É—á–µ–Ω–∞!\nTX: <code>{tx_hash}</code>")
                # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥/–ø–æ–¥–∞—Ä–∫–∞
            else:
                await m.answer(f"‚è≥ –ó–∞–∫–∞–∑ ‚Ññ{order.id}: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        asyncio.create_task(_check())

    return router
