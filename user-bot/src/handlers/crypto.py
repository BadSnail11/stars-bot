from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from decimal import Decimal
import os, asyncio

from sqlalchemy.ext.asyncio import async_sessionmaker
from ..repositories.users import UsersRepo
from ..repositories.orders import OrdersRepo
from ..services.ton import wait_ton_payment


def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="crypto")

    @router.message(Command("buy_ton"))
    async def buy_ton(m: types.Message, command: CommandObject):
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        if not command.args:
            await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/buy_ton 0.5</code>")
            return
        try:
            amount_ton = Decimal(command.args.replace(",", "."))
            if amount_ton <= 0:
                raise ValueError()
        except Exception:
            await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: <code>/buy_ton 0.5</code>")
            return

        wallet = os.getenv("TON_WALLET")
        if not wallet:
            await m.answer("–ö–æ—à–µ–ª—ë–∫ TON –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        memo_prefix = os.getenv("TON_MEMO_PREFIX", "INV-")
        memo = f"{memo_prefix}{m.from_user.id}-{m.message_id}"

        # –°–æ–∑–¥–∞—ë–º pending-–∑–∞–∫–∞–∑
        async with session_maker() as session:
            users = UsersRepo(session)
            orders = OrdersRepo(session)
            user = await users.upsert_from_telegram(m.from_user)
            order = await orders.create_pending_ton_order(user.id, user.username, float(amount_ton), memo, wallet)

        await m.answer(
            "üîê –ü–ª–∞—Ç—ë–∂ (TON)\n"
            f"‚û§ –ê–¥—Ä–µ—Å: <code>{wallet}</code>\n"
            f"‚û§ –°—É–º–º–∞: <b>{amount_ton}</b> TON\n"
            f"‚û§ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (TAG/MEMO): <code>{memo}</code>\n\n"
            "–í–∞–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <b>—Ç–æ—á–Ω–æ</b>, –∏–Ω–∞—á–µ –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            disable_web_page_preview=True
        )

        # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        async def _check():
            tx_hash = await wait_ton_payment(wallet, memo, amount_ton)
            if tx_hash:
                async with session_maker() as session:
                    orders = OrdersRepo(session)
                    await orders.mark_paid(order.id, tx_hash, income=None)
                await m.answer(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!\nTX: <code>{tx_hash}</code>")
            else:
                await m.answer("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        asyncio.create_task(_check())

    return router
