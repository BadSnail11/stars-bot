from aiogram import Router, types, F, Bot, Dispatcher
# from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
import re, asyncio

from ..repositories.users import UsersRepo
from ..repositories.user_bots import UserBotsRepo
from ..services.polling_manager import PollingManager

from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode


TOKEN_RE = re.compile(r"^\d+:[A-Za-z0-9_\-]{35,}$")

class MirrorStates(StatesGroup):
    waiting_token = State()

def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="mirror")

    @router.message(F.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –±–æ—Ç")
    async def ask_token(m: types.Message, state: FSMContext):
        async with session_maker() as session:
            users = UsersRepo(session)
            me = await users.upsert_from_telegram(m.from_user)

            bots = UserBotsRepo(session)
            existing = await bots.get_by_owner(me.id)

            if existing and existing.is_active:
                await m.answer(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ:\n"
                    f"<b>@{existing.bot_username}</b>\n\n"
                    "–ü–æ–∫–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–µ—Ä–∫–∞–ª–æ."
                )
                return

        await state.set_state(MirrorStates.waiting_token)
        await m.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (BotFather). "
            "–§–æ—Ä–º–∞—Ç –≤—Ä–æ–¥–µ <code>1234567890:AA...ZZ</code>.\n"
            "‚ö†Ô∏è –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–∞—Ç–∞—Ö.",
        )

    @router.message(MirrorStates.waiting_token)
    async def receive_token(m: types.Message, state: FSMContext, dp_for_new_bot: Dispatcher, polling_manager: PollingManager):
        token = (m.text or "").strip()
        if not TOKEN_RE.match(token):
            await m.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
        test_bot = Bot(token=token)
        try:
            me = await test_bot.get_me()
        except Exception as e:
            await m.answer(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: <code>{e}</code>")
            await test_bot.session.close()
            return

        bot_username = me.username or ""
        tg_bot_id = me.bot.id
        await test_bot.session.close()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–µ—Ä–∫–∞–ª–æ
        async with session_maker() as session:
            users = UsersRepo(session)
            u = await users.upsert_from_telegram(m.from_user)

            bots = UserBotsRepo(session)
            existing = await bots.get_by_owner(u.id)
            if existing and existing.is_active:
                await m.answer(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ. –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ."
                )
                await state.clear()
                return

            if existing and not existing.is_active:
                # –Ω–∞ –±—É–¥—É—â–µ–µ: –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ¬´–ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é¬ª ‚Äî —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π
                pass

            created = await bots.create(owner_user_id=u.id, token=token, username=bot_username, tg_bot_id=tg_bot_id)

        bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) 
        
        polling_manager.start_bot_polling(dp=dp_for_new_bot, bot=bot, dp_for_new_bot=dp_for_new_bot, polling_manager=polling_manager)
        
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ó–µ—Ä–∫–∞–ª–æ @{bot_username} –∑–∞–ø—É—â–µ–Ω–æ.")


        # –ø–æ –∂–µ–ª–∞–Ω–∏—é —É–¥–∞–ª–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º (–±–µ–∑ –ø–∞–Ω–∏–∫–∏, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è)
        # try:
        #     await m.delete()
        # except Exception:
        #     pass

        # await m.answer(txt)
        # await state.clear()

    return router
