# src/handlers/referral.py
from aiogram import Router, types, F
# from aiogram.filters import Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from ..services.referral import build_ref_link
from ..keyboards.common import main_menu_kb, back_nav_kb, network_kb, accept_kb  # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
from ..repositories.users import UsersRepo
import os
from sqlalchemy.ext.asyncio import async_sessionmaker
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from ..services.payments_api import create_withdraw

_min_balace = int(os.getenv("MIN_BALANCE", "5"))

class Referral(StatesGroup):
    enter_amount = State()
    enter_wallet = State()
    enter_net = State()
    enter_address = State()
    accept_withdraw = State()

def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="referral")

    @router.callback_query(F.data == "referal")
    async def show_ref_link(cb: types.CallbackQuery):
        m = cb.message
        me = await m.bot.get_me()
        link = build_ref_link(me.username or "", m.from_user.id)

        async with session_maker() as s:
            users = UsersRepo(s)
            user = await users.get_by_tg_id(m.chat.id)

        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=link))
        kb.row(types.InlineKeyboardButton(text="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="withdraw"))
        kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))
        markup = kb.as_markup()

        text = (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 40% –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏—Ö –æ–ø–ª–∞—Ç.\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} USD\n\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>{link}</code>"
        )
        await m.edit_text(text, reply_markup=markup)

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª
    @router.callback_query(lambda c: c.data == "back_to_menu")
    async def back_to_menu(cb: types.CallbackQuery):
        await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        await cb.answer()

    @router.callback_query(F.data == "withdraw")
    async def withdraw(cb: types.CallbackQuery, state: FSMContext):
        print(1)
        m = cb.message
        
        async with session_maker() as s:
            users = UsersRepo(s)
            user = await users.get_by_tg_id(m.chat.id)
            balance = user.balance

        print(balance)
        
        if balance < _min_balace:
            await m.edit_text(text=f"–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç {_min_balace} USD", reply_markup=back_nav_kb())
            return

        await m.edit_text(text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USD –Ω–∞ –≤—ã–≤–æ–¥ (–Ω–µ –º–µ–Ω—å—à–µ {_min_balace} USD):", reply_markup=back_nav_kb())
        await state.set_state(Referral.enter_amount)

    @router.message(Referral.enter_amount)
    async def enter_amount(m: types.Message, state: FSMContext):
        try:
            amount = float(m.text)
        except:
            await m.answer("–ù–∞ –≤–≤–æ–¥ –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ!", reply_markup=back_nav_kb())
            await state.clear()
            return
        
        if amount < _min_balace:
            await m.answer(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {_min_balace}", reply_markup=back_nav_kb())
            await state.clear()
            return
        
        await state.update_data(amount=amount)
        
        await m.answer(text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=network_kb())
        # await context.set_state(Referral.enter_network)
    
    @router.callback_query(F.data.split("_")[0] == "NET")
    async def choose_net(cb: types.CallbackQuery, state: FSMContext):
        net = cb.data.split("_")[1]
        await state.update_data(net=net)
        m = cb.message
        await m.edit_text("–í–≤–µ–¥–∏—Ç–µ –ê–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–í–ê–ñ–ù–û, –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É –≤ –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–µ –Ω–∞ —Ç–æ—Ç –∞–¥—Ä–µ—Å –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û):", reply_markup=back_nav_kb())
        await state.set_state(Referral.enter_address)

    @router.message(Referral.enter_address)
    async def enter_address(m: types.Message, state: FSMContext):
        address = m.text
        await state.update_data(address=address)
        data = await state.get_data()
        amount = data.get("amount")
        net = data.get("net")
        await m.answer(text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                 f"–°—É–º–º–∞: {amount} USTD\n"
                 f"–°–µ—Ç—å: {net}\n"
                 f"–ê–¥—Ä–µ—Å: {address}", reply_markup=accept_kb())
        await state.set_state(Referral.accept_withdraw)

    @router.callback_query(F.data == "accept")
    async def choose_net(cb: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        address = str(data.get("address"))
        amount = float(data.get("amount"))
        net = str(data.get("net"))
        m = cb.message

        async with session_maker() as s:
            users = UsersRepo(s)
            user = await users.get_by_tg_id(m.chat.id)

        user_id = user.id

        print(m.chat.id, address, amount, net)
        
        try:
            res = await create_withdraw(int(user_id), address, amount)
            tx = res["tx"]
            await m.edit_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=back_nav_kb())
        except:
            await m.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=back_nav_kb())

        await state.clear()

    return router
