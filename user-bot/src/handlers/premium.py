# src/handlers/premium.py
from aiogram import Router, F, types
# from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
from decimal import Decimal
import os, asyncio

from ..repositories.users import UsersRepo
from ..repositories.orders import OrdersRepo
from ..services.pricing import (
    get_premium_price_in_rub, calc_rub_for_premium,
    get_premium_price_in_ton, calc_ton_for_premium
)
from ..services.ton import wait_ton_payment
from ..services.platega import create_sbp_invoice, wait_payment_confirmed
from ..keyboards.common import who_kb, cancel_kb, main_menu_kb, payment_methods_kb, premium_duration_kb

class BuyPremium(StatesGroup):
    choose_target = State()
    enter_recipient = State()
    enter_months = State()
    choose_payment = State()

BTN_SELF   = "buy_premium_self"
BTN_GIFT   = "buy_premium_gift"
BTN_CANCEL = "buy_premium_cancel"

BTN_M3  = "prem_m3"
BTN_M6  = "prem_m6"
BTN_M12 = "prem_m12"

BTN_PAY_SBP   = "pay_premium_sbp"
BTN_PAY_TON   = "pay_premium_ton"
BTN_PAY_OTHER = "pay_premium_other"

def get_router(session_maker: async_sessionmaker) -> Router:
    router = Router(name="premium")

    @router.message(F.text == ("üëë –ü—Ä–µ–º–∏—É–º"))
    async def entry(m: types.Message, state: FSMContext):
        await state.clear()
        await state.set_state(BuyPremium.choose_target)
        await m.answer("–ö–æ–º—É –ø–æ–∫—É–ø–∞–µ–º Telegram Premium?", reply_markup=who_kb(BTN_SELF, BTN_GIFT, BTN_CANCEL))

    @router.callback_query(F.data == BTN_CANCEL)
    async def cancel(cb: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
        await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

    @router.callback_query(F.data == BTN_SELF)
    async def choose_self(cb: types.CallbackQuery, state: FSMContext):
        await state.update_data(recipient=None)
        await state.set_state(BuyPremium.enter_months)
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=premium_duration_kb(BTN_M3, BTN_M6, BTN_M12, BTN_CANCEL))

    @router.callback_query(F.data == BTN_GIFT)
    async def choose_gift(cb: types.CallbackQuery, state: FSMContext):
        await state.set_state(BuyPremium.enter_recipient)
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).", reply_markup=cancel_kb(BTN_CANCEL))

    @router.message(BuyPremium.enter_recipient)
    async def get_recipient(m: types.Message, state: FSMContext):
        text = (m.text or "").strip()
        if not text:
            await m.answer("–ü—É—Å—Ç–æ. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, @username", reply_markup=cancel_kb(BTN_CANCEL))
            return
        await state.update_data(recipient=text)
        await state.set_state(BuyPremium.enter_months)
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=premium_duration_kb(BTN_M3, BTN_M6, BTN_M12, BTN_CANCEL))

    async def _set_months_and_ask_payment(cb: types.CallbackQuery, state: FSMContext, months: int):
        await state.update_data(months=months)
        await state.set_state(BuyPremium.choose_payment)
        await cb.message.edit_text(
            f"Premium –Ω–∞ {months} –º–µ—Å.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_methods_kb(BTN_PAY_SBP, BTN_PAY_TON, BTN_PAY_OTHER, BTN_CANCEL)
        )

    @router.callback_query(F.data == BTN_M3)
    async def months3(cb: types.CallbackQuery, state: FSMContext):
        await _set_months_and_ask_payment(cb, state, 3)

    @router.callback_query(F.data == BTN_M6)
    async def months6(cb: types.CallbackQuery, state: FSMContext):
        await _set_months_and_ask_payment(cb, state, 6)

    @router.callback_query(F.data == BTN_M12)
    async def months12(cb: types.CallbackQuery, state: FSMContext):
        await _set_months_and_ask_payment(cb, state, 12)

    # ====== –°–ë–ü (Platega, RUB) ======
    @router.callback_query(F.data == BTN_PAY_SBP)
    async def pay_sbp(cb: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        months = data.get("months")
        recipient = data.get("recipient")
        if not months:
            await cb.message.answer("–ù–µ –≤–∏–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´üëë –ü—Ä–µ–º–∏—É–º¬ª.")
            await state.clear()
            return

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + —Ü–µ–Ω–∞ –≤ RUB
        async with session_maker() as session:
            users = UsersRepo(session)
            orders = OrdersRepo(session)
            user = await users.upsert_from_telegram(cb.from_user)

            price_per_month_rub = await get_premium_price_in_rub(session)
            amount_rub = calc_rub_for_premium(months, price_per_month_rub)

        # –∏–Ω–≤–æ–π—Å Platega
        payload = f"user:{cb.from_user.id}|premium:{months}"
        tx_id, redirect = await create_sbp_invoice(
            amount_rub=amount_rub,
            description=f"Telegram Premium {months} –º–µ—Å.",
            payload=payload
        )

        # –∑–∞–∫–∞–∑ pending (RUB)
        async with session_maker() as session:
            orders = OrdersRepo(session)
            order = await orders.create_pending_sbp_order(
                user_id=user.id, 
                username=user.username,
                recipient=recipient,
                type="premium",
                amount=months,
                price=amount_rub,
                transaction_id=tx_id,
                redirect_url=redirect
            )

        await state.clear()
        await cb.message.edit_text(
            f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}: Premium {months} –º–µ—Å. –Ω–∞ {amount_rub} RUB\n"
            "üè¶ –°–ë–ü ‚Äî –ø–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω.\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {redirect}\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
        )

        async def _poll():
            status_tx = await wait_payment_confirmed(tx_id)
            if status_tx:
                async with session_maker() as session:
                    orders = OrdersRepo(session)
                    await orders.mark_paid(order.id, tx_hash=status_tx, income=None)
                await cb.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–ª—É—á–µ–Ω–∞!")
                # TODO: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å–µ–±–µ/–ø–æ–ª—É—á–∞—Ç–µ–ª—é
            else:
                await cb.message.answer(f"‚è≥ –ó–∞–∫–∞–∑ ‚Ññ{order.id}: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.")
        asyncio.create_task(_poll())

    # ====== TON (–∫—Ä–∏–ø—Ç–∞) ======
    @router.callback_query(F.data == BTN_PAY_TON)
    async def pay_ton(cb: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        months = data.get("months")
        recipient = data.get("recipient")
        wallet = os.getenv("TON_WALLET")
        if not months or not wallet:
            await cb.message.answer("TON –∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()
            return

        async with session_maker() as session:
            users = UsersRepo(session)
            orders = OrdersRepo(session)
            user = await users.upsert_from_telegram(cb.from_user)

            price_per_month_ton = await get_premium_price_in_ton(session)
            total_ton = calc_ton_for_premium(months, price_per_month_ton)

            memo_prefix = os.getenv("TON_MEMO_PREFIX", "INV-")
            # –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —É–∫–∞–∂–µ–º —Ç–∏–ø P (premium)
            memo = f"{memo_prefix}P-{cb.from_user.id}-{cb.message.message_id}"

            order = await orders.create_pending_ton_order(
                user_id=user.id, 
                username=user.username,
                recipient=recipient,
                type="premium",
                amount=months,
                price=float(total_ton),
                memo=memo,
                wallet=wallet
            )

        await state.clear()
        await cb.message.edit_text(
            f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}: Premium {months} –º–µ—Å."
            "üíé –ü–ª–∞—Ç—ë–∂ (TON)\n"
            f"‚û§ –ê–¥—Ä–µ—Å: <code>{wallet}</code>\n"
            f"‚û§ –°—É–º–º–∞: <code>{total_ton}</code> TON\n"
            f"‚û§ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (TAG/MEMO): <code>{memo}</code>\n\n"
        )

        async def _check():
            tx_hash = await wait_ton_payment(wallet, memo, total_ton)
            if tx_hash:
                async with session_maker() as session:
                    orders = OrdersRepo(session)
                    await orders.mark_paid(order.id, tx_hash, income=None)
                await cb.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–ª—É—á–µ–Ω–∞!\nTX: <code>{tx_hash}</code>")
                # TODO: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å–µ–±–µ/–ø–æ–ª—É—á–∞—Ç–µ–ª—é
            else:
                await cb.message.answer(f"‚è≥ –ó–∞–∫–∞–∑ ‚Ññ{order.id}: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        asyncio.create_task(_check())

    # ====== –î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞ ======
    @router.callback_query(F.data == BTN_PAY_OTHER)
    async def pay_other(cb: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await cb.message.edit_text("ü™ô –î—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞ –°–ë–ü –∏–ª–∏ TON.")

    return router
