from aiogram import Router, types, F
# from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.db import SessionLocal
from src.repositories.required_channels import RequiredChannelsRepo
from src.utils.owner_scope import resolve_owner_and_bot_key
from src.utils.mirror_bot import get_mirror_bot

router = Router(name="channels")

class ChannelsStates(StatesGroup):
    waiting_action = State()   # –∂–¥—ë–º @username –∏–ª–∏ -@username

async def _render_list(m: types.Message, s, bot_key: int):
    rows = await RequiredChannelsRepo(s).list_active(bot_key)
    text = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + ("\n".join(f"‚Ä¢ {r.channel_username}" for r in rows) or "‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî")
    text += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ -@username –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n/cancel ‚Äî –≤ –º–µ–Ω—é"
    await m.answer(text)

@router.message(F.text == ("üîó –ö–∞–Ω–∞–ª—ã"))
async def channels_enter(m: types.Message, state: FSMContext):
    async with SessionLocal() as s:
        _, bot_key = await resolve_owner_and_bot_key(s, m.from_user.id)
        if not bot_key:
            await m.answer("–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞.")
            return
        await _render_list(m, s, bot_key)
    await state.set_state(ChannelsStates.waiting_action)

@router.message(ChannelsStates.waiting_action, F.text.startswith("-@"))
async def channels_remove(m: types.Message, state: FSMContext):
    ch = (m.text or "").strip()[1:]
    async with SessionLocal() as s:
        _, bot_key = await resolve_owner_and_bot_key(s, m.from_user.id)
        if not bot_key:
            await m.answer("–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await RequiredChannelsRepo(s).disable(bot_key, ch)
        await m.answer(f"–û—Ç–∫–ª—é—á–∏–ª –∫–∞–Ω–∞–ª {ch}.")
        await _render_list(m, s, bot_key)

@router.message(ChannelsStates.waiting_action, F.text.startswith("@"))
async def channels_add(m: types.Message, state: FSMContext):
    ch = (m.text or "").strip()
    async with SessionLocal() as s:
        _, bot_key = await resolve_owner_and_bot_key(s, m.from_user.id)
        if not bot_key:
            await m.answer("–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        mirror = await get_mirror_bot(s, bot_key)
        if not mirror:
            await m.answer("–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            return
        try:
            me = await mirror.get_me()
            cm = await mirror.get_chat_member(ch, me.id)
            if str(getattr(cm, "status", "")) not in {"administrator", "creator"}:
                await m.answer("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ–≥–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞.")
                await mirror.session.close()
                return
        except Exception:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –¥–æ—Å—Ç—É–ø.")
            if mirror: await mirror.session.close()
            return
        await RequiredChannelsRepo(s).add(bot_key, ch)
        await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {ch}.")
        await _render_list(m, s, bot_key)
        await mirror.session.close()
